class Class
  def attr_accessor_with_history(attr_name)
    attr_name = attr_name.to_s
    attr_reader attr_name
    class_eval %{
      def #{attr_name}_history
        @#{attr_name}_history ||= [nil]
      end

      def #{attr_name}=(value)
        #{attr_name}_history << value
        @#{attr_name} = value
      end
    }
  end
end

module CheckPalindrome
  def palindrome?
    self == reverse
  end

  def check_class
    if self.class == Array
      join.palindrome?
    elsif self.class == String
      palidrome?
    end
  end
end

module MoneyConvertation
  DOLLAR = 32.26
  EURO = 43.61
  def in(arg)
    case arg
    when :dollars,:dollar
      self / DOLLAR
    when :euros, :euro
      self / EURO
    when :rubles, :ruble
      self
    else
      raise NoSuchCurrency
    end
  end
end

class Numeric
  include MoneyConvertation
  def dollars
    self * DOLLAR
  end

  def euros
    self * EURO
  end

  def rubles
    self
  end
end

class String
  include CheckPalindrome
end

class Array
  include CheckPalindrome
end

class Dessert
  attr_accessor :name, :calories

  def initialize(name, calories)
    @name = name
    @calories = calories
  end

  def healthy?
    false if @calories > 200
    true
  end

  def delicious?
    true
  end
end

class JellyBean < Dessert
  attr_accessor :flavor

  def delicious?
    !@flavor.casecmp?('black lacorice')
  end
end

class NoSuchCurrency < StandardError
  def message
    puts "Can't convert to your currency"
  end
end

class WrongNumberOfPlayersError < StandardError
  def message
    puts 'The number of players is not count 2'
  end
end

class WrongNumberOfArguments < StandardError
  def message
    puts 'The number of player\'s arguments is not count 2'
  end
end

class NoSuchStrategyError < StandardError
  def message
    puts 'You have chosen the wrong position'
  end
end

def count_words(string)
  string_array = string.gsub(/[^\p{L}\s\d]/,'').downcase.split
  hash = {}
  string_array.each do |word|
    if hash.key?(word)
      hash[word] += 1
    else
      hash[word] = 1
    end
  end
  hash
end

def rock_scissors_paper(array)
  args_hash = { 'R' => 'S', 'S' => 'P', 'P' => 'R' }
  raise WrongNumberOfPlayersError if array.size != 2
  player1 = array[0]
  player2 = array[1]
  array.each do |elem|
    raise WrongNumberOfArguments if elem.size != 2
    raise NoSuchStrategyError unless args_hash.include?(elem[1].upcase)
  end
  if args_hash[player1[1].upcase] == player2[1].upcase || player1[1] == player2[1]
    return "The winner is #{player1[0]}"
  elsif args_hash[player2[1].upcase] == player1[1].upcase
    return "The winner is #{player1[1]}"
  end
end

def combine_anagrams(words)
  words.group_by{ |word| word.chars.sort.to_a }.values
end