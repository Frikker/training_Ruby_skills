class Dessert

  attr_accessor :name, :calories

  def initialize(name, calories)
    @name = name
    @calories = calories
  end

  def name=(name)
    @name = name
  end

  def name
    @name
  end

  def calories=(calories)
    @calories = calories
  end

  def calories
    @calories
  end

  def healthy?()
    if @calories > 200
      false
    end
    true
  end

  def delicious?()
    true
  end

end

class JellyBean < Dessert
  attr_accessor :flavor

  def flavor=(flavor)
    @flavor = flavor
  end

  def flavor()
    @flavor
  end
  
  def delicious?()
    !@flavor.casecmp?("black lacorice")
  end
end

def palindrome?(string)
  return string == string.reverse if string.class == String
  false
end

def count_words(string)
  strarray = string.split
  hash = {}
  strarray.each do |word|
    if hash.key?(word)
      hash[word] += 1
    else
      hash[word] = 1
    end
  end
  hash
end
class WrongNumberOfPlayersError < StandardError
  def message
    puts 'The number of players is not count 2'
  end
end
class WrongNumberOfArguments < StandardError
  def message
    puts "The number of player's arguments is not count 2"
  end
end
class NoSuchStrategyError < StandardError
  def message
    puts ''
  end
end

def rock_scissors_paper(array)
  args_hash = { 'R' => 'S', 'S' => 'P', 'P' => 'R' }
  raise WrongNumberOfPlayersError if array.count != 2
  player1 = array[0]
  player2 = array[1]
  array.each do |elem|
    raise WrongNumberOfArguments if elem.count != 2
    raise NoSuchStrategyError unless args_hash.include?(elem[1].upcase)
  end
  if args_hash[player1[1].upcase] == player2[1].upcase || player1[1] == player2[1]
    return "The winner is #{player1[0]}"
  elsif args_hash[player2[1].upcase] == player1[1].upcase
    return "The winner is #{player1[1]}"
  end
end

def combine_anagrams(words)
end